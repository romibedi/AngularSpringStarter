package com.spring.angular.integration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

import com.spring.angular.core.entities.Account;
import com.spring.angular.core.entities.Blog;
import com.spring.angular.core.repositories.AccountRepo;
import com.spring.angular.core.repositories.BlogRepo;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("classpath:spring/business-config.xml")

public class AccountRepoTest {
    @Autowired
    private AccountRepo repo;

    @Autowired
	BlogRepo blogRepo;

    private Account account;

    // public Account createAccount(Account data);
    @Before
    @Transactional
    @Rollback(false)
    public void setup()
    {
        account = new Account();
        account.setName("name");
        account.setPassword("password");
        repo.createAccount(account);
    }

    // public Account findAccount(Long id);
    @Test
    @Transactional
    public void testFind()
    {
        Account account = repo.findAccount(this.account.getId());
        assertNotNull(account);
        assertEquals(account.getName(), "name");
        assertEquals(account.getPassword(), "password");
    }

    //    public Blog createBlog(Long accountId, Blog data);
    @Test
    @Transactional
    public void createBlog()
    {
        Account account = repo.findAccount(this.account.getId());
        Blog data = new Blog();
        data.setTitle("Kitchen Blog");
    	data.setOwner(account); 
    	
        Blog blog = blogRepo.createBlog(data);
	    
        assertNotNull(account);
        assertEquals(blog.getTitle(), "Kitchen Blog");
        assertEquals(blog.getOwner(), account);
    }

 
    //public BlogList findBlogsByAccount(Long accountId);
    @Test
    @Transactional
    public void findBlogsByAccount()
    {
        Account account = repo.findAccount(this.account.getId());
        Blog data = new Blog();
        data.setTitle("Kitchen Blog");
       
        Blog blog = blogRepo.createBlog(data);
		blog.setOwner(account); // important to do it after getting the blog as the id will be generated by prev call
        
        assertNotNull(account);
        assertEquals(blog.getTitle(), "Kitchen Blog");
        assertEquals(blog.getOwner(), account);
        
        List<Blog> blogList = blogRepo.findBlogsByAccount(account.getId());
        
        assertEquals(blogList.get(0).getTitle(), "Kitchen Blog");
    }

    //public Account findByAccountName(String name);
    @Test
    @Transactional
    public void findByAccountName()
    {
        Account account = repo.findAccountByName("name");
   
        assertNotNull(account);
    }
    
}
